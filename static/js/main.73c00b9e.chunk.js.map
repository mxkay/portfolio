{"version":3,"sources":["hooks/useWindowDimensions.js","hooks/NavigationContext.js","components/Background/Background.jsx","components/Layout/Layout.jsx","components/Nav/Nav.jsx","components/Header/Header.jsx","components/Profile/Profile.jsx","components/ProjectCard/ProjectCard.jsx","components/ProjectPortfolio/ProjectPortfolio.jsx","App.js","serviceWorker.js","index.js"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","NavigationContext","createContext","Background","props","canvasRef","useRef","canvas","current","context","getContext","size","style","interval","setInterval","ctx","h","w","clearRect","trans_x","x","y","Math","cos","sin","trans_y","time","Date","getTime","i","j","r","a","PI","x_0","y_0","moveTo","fillStyle","beginPath","lineTo","fill","draw","clearInterval","className","ref","children","Layout","onScrollFrame","styles","buttonGroup","button","backgroundColor","buttonSelected","color","Nav","useContext","navigation","setCurrentPage","handleChange","event","target","value","preventDefault","ToggleButtonGroup","name","aria-label","defaultValue","ToggleButton","variant","page","onChange","Header","isSticky","forwardedRef","Profile","pronouns","title","photo","profileData","updateProfileData","axios","then","response","console","log","data","feed","entry","gsx$name","$t","gsx$pronouns","gsx$title","gsx$photo","catch","err","src","ProjectCard","project","Card","Img","image","Body","Title","Text","description","url","Button","href","ProjectPortfolio","projects","updateProjects","map","gsx$image","gsx$description","gsx$url","App","updateNavigation","isHeaderSticky","setIsHeaderSticky","headerRef","Provider","getBoundingClientRect","top","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.73c00b9e.chunk.js","sourcesContent":["// SOURCE: https://stackoverflow.com/a/36862446\n\nimport { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}","import { createContext } from \"react\";\n\nconst NavigationContext = createContext();\n\nexport default NavigationContext;","import React, { useRef, useEffect } from \"react\";\nimport \"./Background.css\";\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\n\nconst Background = props => {\n    const { height, width } = useWindowDimensions();\n    const canvasRef = useRef(null)\n    \n    const draw = ( ctx, size, h, w ) => {\n        ctx.clearRect(0, 0, size, size);\n        \n        // Transformed coordinate space\n        const trans_x = (x,y) =>\n            x + 0.1 * (Math.cos(5*x) + Math.sin(5*y));\n        \n        const trans_y = (x,y) =>\n            y + 0.1 * (Math.cos(5*x) + Math.sin(5*y));\n        \n\n        const time = (new Date()).getTime() % 20000 / 20000;\n\n        const layers = 8;\n        const symmetry = 9;\n\n        for( let i = 0; i < layers; i++ ) {\n\n            for( let j = 0; j < symmetry; j++ ) {\n\n                // polar coordinate of first vertex\n                let r = i + 1 - time;\n                r = r > 0 ? r : 0;\n                let a = j * 2 * Math.PI / symmetry;\n\n                // cartesian of first vertex\n                const x_0 = r * Math.cos(a);\n                const y_0 = r * Math.sin(a);\n\n                // VERTEX 0\n                // transform, scale, and center\n                ctx.moveTo(\n                    w / 2 + size/10 * trans_x(x_0,y_0),\n                    h / 2 + size/10 * trans_y(x_0,y_0)\n                );\n\n                // color based on vertex A's position\n                ctx.fillStyle = `rgba(\n                    ${190},\n                    ${220*(0.5 + Math.sin( 3*a + Math.PI*r )/2)},\n                    ${190},\n                    ${0.25*(r - 0.5)/layers})`;\n                \n                ctx.beginPath();\n                \n                // in 1 (bottom out at 0)\n                r = --r > 0 ? r : 0;\n                \n                // cartesian of next vertex\n                let x = r * Math.cos(a);\n                let y = r * Math.sin(a);\n\n                // VERTEX 1\n                // transform, scale, and center\n                ctx.lineTo(\n                    w / 2 + size/10 * trans_x(x,y),\n                    h / 2 + size/10 * trans_y(x,y)\n                );\n                \n                // initial radius, CW 1\n                r = i + 1 - time;\n                a = (j - 1) * 2 * Math.PI / symmetry;\n                \n                // cartesian\n                x = r * Math.cos(a);\n                y = r * Math.sin(a);\n\n                // VERTEX 2\n                // transform, scale, and center\n                ctx.lineTo(\n                    w / 2 + size/10 * trans_x(x,y),\n                    h / 2 + size/10 * trans_y(x,y)\n                );\n\n                // VERTEX 0 (return to start)\n                // transform, scale, and center\n                ctx.lineTo(\n                    w / 2 + size/10 * trans_x(x_0,y_0),\n                    h / 2 + size/10 * trans_y(x_0,y_0)\n                );\n                \n                ctx.fill();\n            }\n        }\n    }\n    \n    useEffect(() => {\n        \n        const canvas = canvasRef.current\n        const context = canvas.getContext(\"2d\")\n        \n        const size = (height > width ? height : width);\n        canvas.width = size;\n        canvas.height = size;\n        canvas.style.width = size + \"px\";\n        canvas.style.height = size + \"px\";\n\n        const interval = setInterval(() => {\n            draw(context, size, height, width );\n        }, 50);\n\n        return () => clearInterval(interval);\n    }, []);\n  \n    return (\n        <div className=\"background-wrapper\">\n            <div className=\"background\">\n                <canvas ref={canvasRef} {...props}/>\n            </div>\n            <div className=\"content\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport default Background","import React from \"react\";\nimport Scrollbars from \"react-custom-scrollbars\";\nimport \"./Layout.css\";\n\nconst Layout = ({ onScrollFrame, children }) => {\n    return (\n        <Scrollbars onScrollFrame={onScrollFrame} >\n            <div className=\"layout\" >\n                {children}\n            </div>\n        </Scrollbars>\n    );\n}\n\nexport default Layout;","import React, { useContext } from \"react\";\nimport { ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport NavigationContext from \"../../hooks/NavigationContext\";\nimport { findByLabelText } from \"@testing-library/react\";\nimport \"./Nav.css\";\n\nconst Nav = () => {\n    const { navigation, setCurrentPage } = useContext(NavigationContext);\n\n    const handleChange = (event) => {\n        setCurrentPage(event.target.value);\n        event.preventDefault();\n    }\n\n    return (\n        <div className=\"nav\">\n            <ToggleButtonGroup\n                name=\"nav\"\n                aria-label=\"Navigation\"\n                defaultValue=\"projects\"\n                style={styles.buttonGroup}\n            >\n                <ToggleButton\n                    name=\"nav\"\n                    variant=\"nav\"\n                    style={navigation.page === \"projects\" ? styles.buttonSelected : styles.button}\n                    value=\"projects\"\n                    onChange={handleChange}\n                >Projects\n                </ToggleButton>\n                <ToggleButton\n                    name=\"nav\"\n                    variant=\"nav\"\n                    style={navigation.page === \"about\" ? styles.buttonSelected : styles.button}\n                    value=\"about\"\n                    onChange={handleChange}\n                >About\n                </ToggleButton>\n                <ToggleButton\n                    name=\"nav\"\n                    variant=\"nav\"\n                    style={navigation.page === \"contact\" ? styles.buttonSelected : styles.button}\n                    value=\"contact\"\n                    onChange={handleChange}\n                >Contact\n                </ToggleButton>\n            </ToggleButtonGroup>\n        </div>\n    );\n}\n\nconst styles = {\n    buttonGroup: {\n        width: \"100%\",\n    },\n    button: {\n        backgroundColor: \"#777\",\n    },\n    buttonSelected: {\n        backgroundColor: \"#CCC\",\n        color: \"black\",\n    }\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./Header.css\";\n\nimport Nav from \"../Nav/Nav\";\n\nconst Header = ({ isSticky, forwardedRef }) => \n    <div className={`header-wrapper ${isSticky ? \"sticky\" : \"\"}`} ref={forwardedRef}>\n        <div className={`header ${isSticky ? \"sticky\" : \"\"}`}>\n            <Nav />\n        </div>\n    </div>;\n\nexport default Header;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\nimport \"./Profile.css\";\n\nconst Profile = () => {\n    const { height, width } = useWindowDimensions();\n\n    const [profileData, updateProfileData] = useState({\n        name: \"\",\n        pronouns: \"\",\n        title: \"\",\n        photo: \"\",\n    });\n\n    // ON MOUNT\n    useEffect( () => {\n        // const sheetURL = 'https://docs.google.com/spreadsheets/d/12WudbKp3rSdJJpJx7ANPEcC8J7unsYWwWaHBpXjtfPo/edit#gid=677653555';\n        const sheetAsJSON = 'https://spreadsheets.google.com/feeds/list/12WudbKp3rSdJJpJx7ANPEcC8J7unsYWwWaHBpXjtfPo/2/public/full?alt=json'\n\n        // FETCH project data\n        axios(sheetAsJSON)\n        // STORE project data to state\n        .then( response => {\n            console.log(\"response.data\", response.data);\n            updateProfileData( \n                {\n                    name: response.data.feed.entry[0].gsx$name.$t,\n                    pronouns: response.data.feed.entry[0].gsx$pronouns.$t,\n                    title: response.data.feed.entry[0].gsx$title.$t,\n                    photo: response.data.feed.entry[0].gsx$photo.$t,\n                }\n            );\n        })\n        .catch( err => console.log('error loading ajax'));\n    },[]);\n\n    return (\n        <div className=\"profile-wrapper\">\n            <div className=\"profile\">\n                <div className=\"profile-photo-wrapper\">\n                    <img className=\"profile-photo\" src={profileData.photo} />\n                </div>\n                <div className=\"profile-name\">{profileData.name}</div>\n                <div className=\"profile-pronouns\">{profileData.pronouns}</div>\n                <div className=\"profile-title\">{profileData.title}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default Profile;","import React from \"react\";\nimport { Button, Card, Figure } from \"react-bootstrap\";\nimport \"./ProjectCard.css\";\n\nconst ProjectCard = ({ project }) => {\n    return (\n        <Card className=\"project-card\">\n            <div className=\"project-card-image-clipzone\" >\n                <Card.Img variant=\"top\" src={project.image} className=\"project-card-image\" />\n            </div>\n            <Card.Body>\n                <Card.Title>{project.title}</Card.Title>\n                <Card.Text>{project.description}</Card.Text>\n                {project.url ? <Button variant=\"primary\" href={project.url}>live demo</Button> : <></> }\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default ProjectCard;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./ProjectPortfolio.css\";\n\nimport ProjectCard from \"../ProjectCard/ProjectCard\";\n\nconst ProjectPortfolio = () => {\n    const [projects, updateProjects] = useState([]);\n\n    // ON MOUNT\n    useEffect( () => {\n        // const sheetURL = 'https://docs.google.com/spreadsheets/d/12WudbKp3rSdJJpJx7ANPEcC8J7unsYWwWaHBpXjtfPo/edit#gid=677653555';\n        const sheetAsJSON = 'https://spreadsheets.google.com/feeds/list/12WudbKp3rSdJJpJx7ANPEcC8J7unsYWwWaHBpXjtfPo/1/public/full?alt=json'\n\n        // FETCH project data\n        axios(sheetAsJSON)\n        // STORE project data to state\n        .then( response => {\n            // console.log(\"response\", response.data.feed.entry);\n            updateProjects( response.data.feed.entry.map( project => {\n                return {\n                    title: project.gsx$title.$t,\n                    image: project.gsx$image.$t,\n                    description: project.gsx$description.$t,\n                    url: project.gsx$url.$t\n                }\n            }));\n        })\n        .catch( err => console.log('error loading ajax'));\n    },[]);\n\n    return (\n        <div className=\"projects-container\">\n            {projects[0] ? projects.map( project => <ProjectCard project={project} /> ) : <></>}\n        </div>\n    );\n}\n\nexport default ProjectPortfolio;","import React, { useState, useRef } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport useWindowDimensions from \"./hooks/useWindowDimensions\";\nimport NavigationContext from \"./hooks/NavigationContext\";\n\nimport Background from \"./components/Background/Background\";\nimport Layout from \"./components/Layout/Layout\";\nimport Header from \"./components/Header/Header\";\nimport Profile from \"./components/Profile/Profile\";\nimport ProjectPortfolio from \"./components/ProjectPortfolio/ProjectPortfolio\";\n\n\nfunction App() {\n  const { height, width } = useWindowDimensions();\n\n  const [navigation, updateNavigation] = useState({ page: \"projects\" });\n  const setCurrentPage = (value) => {\n    updateNavigation({ ...navigation, page: value });\n  }\n\n  const [isHeaderSticky, setIsHeaderSticky] = useState(false);\n  const headerRef = useRef(null);\n  const onScrollFrame = () => {\n    if(headerRef) {\n      setIsHeaderSticky(headerRef.current.getBoundingClientRect().top <= 0);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <NavigationContext.Provider value={{\n          navigation,\n          setCurrentPage\n      }}>\n        <Background>\n          <Layout onScrollFrame={onScrollFrame} >\n            <Profile />\n            <Header isSticky={isHeaderSticky} forwardedRef={headerRef} />\n            {navigation.page === \"projects\" ?\n              <ProjectPortfolio />\n            :navigation.page === \"about\" ?\n              <></>\n            :navigation.page === \"contact\" ?\n              <></>\n            :\n              <></>\n            }\n          </Layout>\n        </Background>\n      </NavigationContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}