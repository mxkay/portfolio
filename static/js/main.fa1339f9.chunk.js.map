{"version":3,"sources":["hooks/NavigationContext.js","hooks/useWindowDimensions.js","components/Background/Background.jsx","components/ProfilePhoto/ProfilePhoto.jsx","components/Ribbon/Ribbon.jsx","components/Header/Header.jsx","components/Body/Body.jsx","components/Nav/Nav.jsx","components/ProjectCard/ProjectCard.jsx","components/ProjectPortfolio/ProjectPortfolio.jsx","App.js","serviceWorker.js","index.js"],"names":["NavigationContext","createContext","getWindowDimensions","window","width","innerWidth","height","innerHeight","Background","props","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","canvasRef","useRef","draw","ctx","size","h","w","time","Date","getTime","clearRect","strokeStyle","lineWidth","lineJoin","i","moveTo","beginPath","r","Array","from","Math","floor","keys","forEach","idx","t","x","cos","y","sin","lineTo","trans_x","trans_y","stroke","canvas","current","context","getContext","style","interval","setInterval","clearInterval","className","ref","children","ProfilePhoto","Ribbon","Header","Body","nav","styles","buttonGroup","button","backgroundColor","borderWidth","buttonSelected","color","Nav","useContext","navigation","setCurrentPage","handleChange","event","target","value","preventDefault","ToggleButtonGroup","name","aria-label","defaultValue","ToggleButton","variant","page","onChange","ProjectCard","project","Card","Img","src","image","Title","title","Text","description","url","Button","href","ProjectPortfolio","projects","updateProjects","axios","then","response","data","feed","entry","map","gsx$title","$t","gsx$image","gsx$description","gsx$url","catch","err","console","log","App","updateNavigation","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fa1339f9.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst NavigationContext = createContext();\n\nexport default NavigationContext;","// SOURCE: https://stackoverflow.com/a/36862446\n\nimport { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n        width,\n        height\n    };\n}\n\nexport default function useWindowDimensions() {\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n    useEffect(() => {\n        function handleResize() {\n        setWindowDimensions(getWindowDimensions());\n        }\n\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, []);\n\n    return windowDimensions;\n}","import React, { useRef, useEffect } from \"react\";\nimport \"./Background.css\";\nimport useWindowDimensions from \"../../hooks/useWindowDimensions\";\n\nconst Background = props => {\n    const { height, width } = useWindowDimensions();\n    const canvasRef = useRef(null)\n    \n    const draw = ( ctx, size, h, w ) => {\n\n        const trans_x = (x,y) =>\n            x + 0.125 * (Math.cos(4*x) + Math.sin(4*y) - 1);\n\n        const trans_y = (x,y) =>\n            y + 0.125 * (Math.cos(4*x) + Math.sin(4*y) - 1);\n\n        const time = (new Date()).getTime();\n        ctx.clearRect(0, 0, size, size);\n\n        ctx.strokeStyle = \"#CCC\";\n        ctx.lineWidth = 4;\n        ctx.lineJoin = \"round\";\n\n        for(let i = 0; i <= 8; i++) {\n            \n            ctx.moveTo(size, size);\n            ctx.beginPath();\n            \n            const r = (i + 1 - (time % 20000)/20000);\n\n            Array.from(Array(Math.floor(i > 0 ? r * 100 + 2 : 101 )).keys())\n            .forEach(idx => {\n                const t = 2*idx * 0.0314159265 / (r ? r : 1);\n                const x = r * Math.cos(t);\n                const y = r * Math.sin(t);\n\n                ctx.lineTo( w / 2 + size/10 * trans_x(x,y), h / 2 + size/10 * trans_y(x,y));\n            });\n            \n            ctx.stroke();\n        }\n    }\n    \n    useEffect(() => {\n        \n        const canvas = canvasRef.current\n        const context = canvas.getContext(\"2d\")\n        \n        const size = (height > width ? height : width);\n        canvas.width = size;\n        canvas.height = size;\n        canvas.style.width = size + \"px\";\n        canvas.style.height = size + \"px\";\n\n        const interval = setInterval(() => {\n            draw(context, size, height, width );\n        }, 20);\n\n        return () => clearInterval(interval);\n    }, []);\n  \n    return (\n        <div className=\"background-wrapper\">\n            <div className=\"background\">\n                <canvas ref={canvasRef} {...props}/>\n            </div>\n            <div className=\"content\">\n                {props.children}\n            </div>\n        </div>\n    );\n}\n\nexport default Background","import React from \"react\";\nimport \"./ProfilePhoto.css\";\n\nconst ProfilePhoto = () =>\n    <div className=\"profile-photo-wrapper\">\n        <div className=\"profile-photo-frame\">\n            <div className=\"profile-photo\"/>\n        </div>\n    </div>\n\nexport default ProfilePhoto;\n","import React from \"react\";\nimport \"./Ribbon.css\";\n\nconst Ribbon = () => {\n    return (\n        <div className=\"ribbon-wrapper\">\n            <div className=\"ribbon\">\n                <div className=\"ribbon-name-wrapper\">\n                    <p className=\"ribbon-name\">Kay Vail</p>\n                    <p className=\"ribbon-pronouns\">she/they</p>\n                </div>\n                <p className=\"ribbon-title\">Full Stack Software Developer</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Ribbon;\n","import React from \"react\";\nimport \"./Header.css\";\n\nimport ProfilePhoto from \"../ProfilePhoto/ProfilePhoto\";\nimport Ribbon from \"../Ribbon/Ribbon\";\n\nconst Header = () => \n    <div className=\"header\">\n        <ProfilePhoto />\n        <Ribbon />\n    </div>;\n\nexport default Header;","import React from \"react\";\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport \"./Body.css\";\n\nconst Body = props => \n    <div className=\"body\">\n        {props.nav ? props.nav : <></>}\n        <Scrollbars>\n            {props.children}\n        </Scrollbars>\n\n    </div>\n\nexport default Body;","import React, { useContext } from \"react\";\nimport { ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\nimport NavigationContext from \"../../hooks/NavigationContext\";\nimport { findByLabelText } from \"@testing-library/react\";\n\nconst Nav = () => {\n    const { navigation, setCurrentPage } = useContext(NavigationContext);\n\n    const handleChange = (event) => {\n        setCurrentPage(event.target.value);\n        event.preventDefault();\n    }\n\n    return (\n        <div className=\"nav-wrapper\">\n            <ToggleButtonGroup\n                name=\"nav\"\n                aria-label=\"Navigation\"\n                defaultValue=\"projects\"\n                style={styles.buttonGroup}\n            >\n                <ToggleButton\n                    name=\"nav\"\n                    variant=\"secondary\"\n                    style={navigation.page === \"projects\" ? styles.buttonSelected : styles.button}\n                    value=\"projects\"\n                    onChange={handleChange}\n                >Projects\n                </ToggleButton>\n                <ToggleButton\n                    name=\"nav\"\n                    variant=\"secondary\"\n                    style={navigation.page === \"about\" ? styles.buttonSelected : styles.button}\n                    value=\"about\"\n                    onChange={handleChange}\n                >About\n                </ToggleButton>\n                <ToggleButton\n                    name=\"nav\"\n                    variant=\"secondary\"\n                    style={navigation.page === \"contact\" ? styles.buttonSelected : styles.button}\n                    value=\"contact\"\n                    onChange={handleChange}\n                >Contact\n                </ToggleButton>\n            </ToggleButtonGroup>\n        </div>\n    );\n}\n\nconst styles = {\n    buttonGroup: {\n        width: \"100%\"\n    },\n    button: {\n        backgroundColor: \"#777\",\n        borderWidth: 0,\n    },\n    buttonSelected: {\n        backgroundColor: \"#CCC\",\n        color: \"black\",\n        borderWidth: 0,\n    }\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { Button, Card, Figure } from \"react-bootstrap\";\nimport \"./ProjectCard.css\";\n\nconst ProjectCard = ({ project }) => {\n    return (\n        <Card className=\"project-card\">\n            <div className=\"project-card-image-clipzone\" >\n                <Card.Img variant=\"top\" src={project.image} className=\"project-card-image\" />\n            </div>\n            <Card.Body>\n                <Card.Title>{project.title}</Card.Title>\n                <Card.Text>{project.description}</Card.Text>\n                {project.url ? <Button variant=\"primary\" href={project.url}>live demo</Button> : <></> }\n            </Card.Body>\n        </Card>\n    )\n}\n\nexport default ProjectCard;","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./ProjectPortfolio.css\";\n\nimport ProjectCard from \"../ProjectCard/ProjectCard\";\n\nconst ProjectPortfolio = () => {\n    const [projects, updateProjects] = useState([]);\n\n    // ON MOUNT\n    useEffect( () => {\n        // const sheetURL = 'https://docs.google.com/spreadsheets/d/12WudbKp3rSdJJpJx7ANPEcC8J7unsYWwWaHBpXjtfPo/edit?usp=sharing';\n        const sheetAsJSON = 'https://spreadsheets.google.com/feeds/list/12WudbKp3rSdJJpJx7ANPEcC8J7unsYWwWaHBpXjtfPo/od6/public/values?alt=json'\n\n        // FETCH project data\n        axios(sheetAsJSON)\n        // STORE project data to state\n        .then( response => {\n            // console.log(\"response.data\", response.data);\n            updateProjects( response.data.feed.entry.map( project => {\n                return {\n                    title: project.gsx$title.$t,\n                    image: project.gsx$image.$t,\n                    description: project.gsx$description.$t,\n                    url: project.gsx$url.$t\n                }\n            }));\n        })\n        .catch( err => console.log('error loading ajax'));\n    },[]);\n\n    return (\n        <div className=\"projects-container\">\n            {projects[0] ? projects.map( project => <ProjectCard project={project} /> ) : <></>}\n        </div>\n    );\n}\n\nexport default ProjectPortfolio;","import React, { useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NavigationContext from \"./hooks/NavigationContext\";\n\nimport Background from \"./components/Background/Background\";\nimport Header from \"./components/Header/Header\";\nimport Body from \"./components/Body/Body\";\nimport Nav from \"./components/Nav/Nav\";\nimport ProjectPortfolio from \"./components/ProjectPortfolio/ProjectPortfolio\";\n\nfunction App() {\n  const [navigation, updateNavigation] = useState({ page: \"projects\" });\n  const setCurrentPage = (value) => {\n    updateNavigation({ ...navigation, page: value });\n  }\n\n  return (\n    <div className=\"App\">\n      <NavigationContext.Provider value={{\n          navigation,\n          setCurrentPage\n      }}>\n        <Background>\n          <Header />\n          <Body nav={<Nav/>}>\n            {navigation.page === \"projects\" ?\n              <ProjectPortfolio />\n            :navigation.page === \"about\" ?\n              <></>\n            :navigation.page === \"contact\" ?\n              <></>\n            :\n              <></>\n            }\n          </Body>\n        </Background>\n      </NavigationContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}